#!/usr/bin/env python3

import sys, time, argparse, subprocess, os.path, tempfile
from psutil import virtual_memory

Description = """
Prefix-free parsing + Repair compression

  Compression:
     {exe} file [options]
  creates compressed files file.C and file.R

  Decompression:
     {exe} -d file [options]
  decompresses file.C and file.R to file.out          
"""

# path of the auxiliary tools
# ctph parsing 
parse_exe = "ctph/pscan.x"
iparse_exe = "ctph/newscan.x"
parseNT_exe = "ctph/newscanNT.x"
# repair: plain and with memory constraint (symbols are integers in both tools) 
repair_exe = "repair/irepair"
largerepair_exe = "largeb_repair/irepair"
# old version not producing balanced grammars
# largerepair_exe = "large_repair/irepair" 
# despair for byte symbols 
despair_exe = "repair/despair"
# despair for int32 symbols 
integer_despair_exe = "repair/idespair"
# preprocess dict into a sequence of int32 representing both chars and distinct EOS 
preprocess_exe = "procdic"
integer_preprocess_exe = "iprocdic"
# create final output file
postprocess_exe = "postproc"
integer_postprocess_exe = "ipostproc"

def main():
  show_command_line(sys.stderr)
  parser = argparse.ArgumentParser(description=Description.format(exe=sys.argv[0]), formatter_class=argparse.RawTextHelpFormatter)
  parser.add_argument('input', help='input file name', type=str)
  parser.add_argument('-w', '--wsize', help='sliding window size (def. 10)', default=10, type=int)
  parser.add_argument('-p', '--mod', help='hash modulus (def. 100)', default=100, type=int)
  parser.add_argument('-t', help='number of helper threads (def. None)', default=0, type=int)
  parser.add_argument('-d', help='decompress',action='store_true')
  parser.add_argument('-c', help='decompress and check',action='store_true')
  parser.add_argument('-r', help='compression full report',action='store_true')
  parser.add_argument('-m', help='force repair to use at most M MBs (def. 95%% of available RAM)',default=-1, type=int)
  parser.add_argument('-k', help='keep intermediate files',action='store_true')
  parser.add_argument('-i', help='input symbols are integers',action='store_true')
  parser.add_argument('-v', help="verbose", action='store_true')
  args = parser.parse_args()
  # if no max RAM provided on command line uses 95% of total 
  if(args.m<0):
    mem = virtual_memory().total
    args.m = max(1,int(0.95*mem/2**20)) # avoid accidental 0 since it triggers plain repair w/out memory constraints 

  logfile_name = args.input + ".log"
  # get absolute path to main bigrepair directory 
  args.main_dir = os.path.dirname(os.path.abspath(__file__))
  print("Sending logging messages to file:", logfile_name)
  with open(logfile_name,"a") as logfile:
    start0 = start = time.time()
        
    if(args.d or args.c): # decompress and check
      exe = integer_despair_exe if args.i else despair_exe
      command = "{exe} {file}".format(
                exe = os.path.join(args.main_dir,exe), file=args.input)
      print("==== Decompressing C+R files.\nCommand:", command)
      if(execute_command(command,logfile)!=True):
        return
      print("Elapsed time: {0:.4f}".format(time.time()-start0));
      if args.c:      
        command = "cmp {file} {file}.out".format(file=args.input); 
        print("==== Comparing decompressed file.\nCommand:", command);
        if(execute_command(command,logfile)):
          print("Decompressed file matches");
        else:
          print("Decompressed file differs");
      
      
    else:       # pfp + repair
      # ---------- parsing of the input file 
      if args.t>0:
        exe = iparse_exe if args.i else parse_exe
        command = "{exe} {file} -w {wsize} -p {modulus} -t {th}".format(
                exe = os.path.join(args.main_dir,exe),
                wsize=args.wsize, modulus = args.mod, th=args.t, file=args.input)
      else:
        command = "{exe} {file} -w {wsize} -p {modulus}".format(
                exe = os.path.join(args.main_dir,parseNT_exe),
                wsize=args.wsize, modulus = args.mod, file=args.input)
      if args.i: command += " -b4" 
      if args.v: command += " -v"
      command += " -c"
      print("==== Parsing.\nCommand:", command)
      if(execute_command(command,logfile)!=True):
        return
      ctph_time = time.time()-start
      print("Parsing time: {0:.4f}".format(ctph_time))
      # delete temporary parsing files 
      if not args.k:
        command = "rm -f {file}.parse_old {file}.last {file}.occ".format(file=args.input)
        if(execute_command(command,logfile)!=True):
          return
      
      # ---- preprocess the dictionary 
      start = time.time()
      exe = integer_preprocess_exe if args.i else preprocess_exe
      command = "{exe} {file}.dicz".format(
                exe = os.path.join(args.main_dir, exe), file=args.input)
      print("==== Preprocessing the dictionary.\nCommand:", command)
      if(execute_command(command,logfile)!=True):
        return
      preprocess_time = time.time()-start
      print("Preprocess time: {0:.4f}".format(preprocess_time))
  
      # ---- apply repair to the modified dictionary
      start = time.time()
      if args.m==0:     
        command = "{exe} {file}.dicz.int".format(
                exe = os.path.join(args.main_dir,repair_exe), file=args.input)
      else:
        command = "{exe} {file}.dicz.int {mb}".format(mb=args.m,
                exe = os.path.join(args.main_dir,largerepair_exe), file=args.input)
      print("==== Repair dictionary.\nCommand:", command)
      if(execute_command(command,logfile)!=True):
       return
      repair_time = time.time()-start
      print("repair(dict) time: {0:.4f}".format(repair_time))
      
      # ---- apply repair to the parse     
      start = time.time()
      if args.m==0:     
        command = "{exe} {file}.parse".format(
                exe = os.path.join(args.main_dir,repair_exe), file=args.input)
      else:
        command = "{exe} {file}.parse {mb}".format(mb=args.m,
                exe = os.path.join(args.main_dir,largerepair_exe), file=args.input)
      print("==== Repair parse.\nCommand:", command)
      if(execute_command(command,logfile)!=True):
       return
      repair_time = time.time()-start
      print("repair(parse) time: {0:.4f}".format(repair_time))

      # ---- postprocess
      start = time.time()
      exe = integer_postprocess_exe if args.i else postprocess_exe
      command = "{exe} {file}".format(
                exe = os.path.join(args.main_dir,exe), file=args.input)
      print("==== Postprocessing the dictionary.\nCommand:", command)
      fp = tempfile.TemporaryFile()
      if(execute_command(command,logfile,fp)!=True):
        return      
      postprocess_time = time.time()-start
      print("Postprocess time: {0:.4f}".format(postprocess_time))

      total_time = time.time()-start0
      print("Elapsed time: {0:.4f}".format(total_time))
      # get the estimated compressed size
      fp.seek(0); estimated_compression = int(fp.read().split()[-1]); fp.close()
      
      if args.r:
        compression_report(args.input,ctph_time,total_time,estimated_compression)
      
      # delete temporary parsing/dictionary files
      if not args.k:
        command = "rm -f {file}.parse {file}.parse.C {file}.parse.R {file}.dicz {file}.dicz.len {file}.dicz.int {file}.dicz.int.C {file}.dicz.int.R".format(file=args.input)
        if(execute_command(command,logfile)!=True):
          return
      # ---- repair done   

  print("==== Done")



def compression_report(name,t1,ttot,est_compr):
  print(" >> ctph time: {0:.2f}".format(t1))
  print(" >> total time: {0:.2f}".format(ttot))
  isize = os.path.getsize(name)
  print(" >> input size:",isize)
  psize = os.path.getsize(name+".parse") 
  print(" >> ctph_parse size: {0}  ({1:.2f}%)".format(psize,100*psize/isize))
  dsize = os.path.getsize(name+".dicz") 
  print(" >> ctph_dict size: {0}  ({1:.2f}%)".format(dsize,100*dsize/isize))
  csize = os.path.getsize(name+".C") 
  rsize = os.path.getsize(name+".R") 
  print(" >> repair size:",csize+rsize, "  (%d+%d)" % (csize,rsize))
  print(" >> compressed size:", est_compr, "  ({0:.2f}%)".format(100*est_compr/isize))
  


def show_command_line(f):
  f.write("Command line: ") 
  for x in sys.argv:
     f.write(x+" ")
  f.write("\n")   

# compute hash digest for a file 
def file_digest(name,logfile):
    try:
      hash_command = "{exe} {infile}".format(exe=shasum_exe, infile=name)
      hashsum = subprocess.check_output(hash_command.split(),stderr=logfile)
      hashsum = hashsum.decode("utf-8").split()[0]
    except:
      hashsum = "Error!" 
    return hashsum  
      
# execute command: return True is everything OK, False otherwise
def execute_command(command,logfile,outfile=None):
  try:
    #subprocess.run(command.split(),stdout=logfile,stderr=logfile,check=True,env=env)
    if not outfile:
      outfile = logfile
    subprocess.check_call(command.split(),stdout=outfile,stderr=logfile)
  except subprocess.CalledProcessError:
    print("Error executing command line:")
    print("\t"+ command)
    print("Check log file: " + logfile.name)
    return False
  return True


if __name__ == '__main__':
  main()
